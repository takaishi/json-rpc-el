(require 'json)

(defun json-rpc:join-plist (glue plist)
  (let (result)
    (while plist
      (if (= 1 (length plist))
          (push (car plist) result)
        (push (concat (substring (symbol-name (car plist)) 1) glue (cadr plist)) result))
      (setq plist (cddr plist)))
    result))

(defun json-rpc:make-data (plist)
  (let ((plist (mapcar '(lambda (x) (if (numberp x) (number-to-string x) x)) plist)))
    (if (member :params plist)
        (if  (plist-get plist :params)
            (if (listp (plist-get plist :params))
                (setq plist (plist-put plist :params (vconcat (list (mapconcat 'identity (reverse (json-rpc:join-plist "=" (plist-get plist :params))) "&")) nil)))
              (setq plist (plist-put plist :params (plist-get plist :params))))
          (setq plist (plist-put plist :params []))))
    (json-encode-plist plist)))

(defun json-rpc:call-method (url method rpc-method params)
  (let ((url-request-method method)
        (url-request-extra-headers (list '("Content-type" . "application/json")))
        (url-request-data (json-rpc:make-data `(:jsonrpc "1.0" :id :curltest :method ,rpc-method :params ,params))))
    (with-current-buffer (url-retrieve-synchronously url)
      (goto-char (point-min))
      (re-search-forward "\n\n" nil t)
      (json-read))))

(provide 'json-rpc)
